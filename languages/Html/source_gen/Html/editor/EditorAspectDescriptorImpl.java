package Html.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new HeaderTag_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new HrefTag_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new HtmlDocument_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new ListItemTag_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new ParagraphTag_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new TableBody_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new TableColumns_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new TableHead_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new TableRow_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new TableTag_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new TextElement_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new UnorderedListTag_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }



  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x9047bdebbe544bdaL, 0xac2865e4c26965daL, 0x214ad0a17bc20057L), MetaIdFactory.conceptId(0x9047bdebbe544bdaL, 0xac2865e4c26965daL, 0x46aed3cb2881e616L), MetaIdFactory.conceptId(0x9047bdebbe544bdaL, 0xac2865e4c26965daL, 0x214ad0a17bbce2a5L), MetaIdFactory.conceptId(0x9047bdebbe544bdaL, 0xac2865e4c26965daL, 0x214ad0a17bc2254aL), MetaIdFactory.conceptId(0x9047bdebbe544bdaL, 0xac2865e4c26965daL, 0x214ad0a17bc17153L), MetaIdFactory.conceptId(0x9047bdebbe544bdaL, 0xac2865e4c26965daL, 0x214ad0a17bc2bc98L), MetaIdFactory.conceptId(0x9047bdebbe544bdaL, 0xac2865e4c26965daL, 0x214ad0a17bc2dc43L), MetaIdFactory.conceptId(0x9047bdebbe544bdaL, 0xac2865e4c26965daL, 0x214ad0a17bc2a839L), MetaIdFactory.conceptId(0x9047bdebbe544bdaL, 0xac2865e4c26965daL, 0x214ad0a17bc2cf8cL), MetaIdFactory.conceptId(0x9047bdebbe544bdaL, 0xac2865e4c26965daL, 0x214ad0a17bc29f5fL), MetaIdFactory.conceptId(0x9047bdebbe544bdaL, 0xac2865e4c26965daL, 0x46aed3cb288420baL), MetaIdFactory.conceptId(0x9047bdebbe544bdaL, 0xac2865e4c26965daL, 0x214ad0a17bc22aafL)).seal();
}
