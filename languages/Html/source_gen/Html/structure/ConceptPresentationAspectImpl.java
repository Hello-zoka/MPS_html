package Html.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_HeaderTag;
  private ConceptPresentation props_HrefTag;
  private ConceptPresentation props_HtmlDocument;
  private ConceptPresentation props_HtmlElement;
  private ConceptPresentation props_ListItemTag;
  private ConceptPresentation props_ParagraphTag;
  private ConceptPresentation props_TableBody;
  private ConceptPresentation props_TableColumns;
  private ConceptPresentation props_TableHead;
  private ConceptPresentation props_TableRow;
  private ConceptPresentation props_TableTag;
  private ConceptPresentation props_UnorderedListTag;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.HeaderTag:
        if (props_HeaderTag == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Header");
          props_HeaderTag = cpb.create();
        }
        return props_HeaderTag;
      case LanguageConceptSwitch.HrefTag:
        if (props_HrefTag == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Reference");
          props_HrefTag = cpb.create();
        }
        return props_HrefTag;
      case LanguageConceptSwitch.HtmlDocument:
        if (props_HtmlDocument == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("HtmlDocument");
          props_HtmlDocument = cpb.create();
        }
        return props_HtmlDocument;
      case LanguageConceptSwitch.HtmlElement:
        if (props_HtmlElement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_HtmlElement = cpb.create();
        }
        return props_HtmlElement;
      case LanguageConceptSwitch.ListItemTag:
        if (props_ListItemTag == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Item");
          props_ListItemTag = cpb.create();
        }
        return props_ListItemTag;
      case LanguageConceptSwitch.ParagraphTag:
        if (props_ParagraphTag == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Paragraph");
          props_ParagraphTag = cpb.create();
        }
        return props_ParagraphTag;
      case LanguageConceptSwitch.TableBody:
        if (props_TableBody == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Body");
          props_TableBody = cpb.create();
        }
        return props_TableBody;
      case LanguageConceptSwitch.TableColumns:
        if (props_TableColumns == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Columns");
          props_TableColumns = cpb.create();
        }
        return props_TableColumns;
      case LanguageConceptSwitch.TableHead:
        if (props_TableHead == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Head");
          props_TableHead = cpb.create();
        }
        return props_TableHead;
      case LanguageConceptSwitch.TableRow:
        if (props_TableRow == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Row");
          props_TableRow = cpb.create();
        }
        return props_TableRow;
      case LanguageConceptSwitch.TableTag:
        if (props_TableTag == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Table");
          props_TableTag = cpb.create();
        }
        return props_TableTag;
      case LanguageConceptSwitch.UnorderedListTag:
        if (props_UnorderedListTag == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Unordered List");
          props_UnorderedListTag = cpb.create();
        }
        return props_UnorderedListTag;
    }
    return null;
  }
}
