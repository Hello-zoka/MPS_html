package Html.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenAspectBase;
import Html.structure.LanguageConceptSwitch;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.text.rt.TextGenDescriptor;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.text.rt.TextGenModelOutline;
import org.jetbrains.mps.openapi.model.SNode;
import java.nio.charset.Charset;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class TextGenAspectDescriptor extends TextGenAspectBase {
  private final LanguageConceptSwitch myIndex = new LanguageConceptSwitch();

  public TextGenAspectDescriptor() {
  }

  @Nullable
  @Override
  public TextGenDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    switch (myIndex.index(concept)) {
      case LanguageConceptSwitch.HeaderTag:
        return new HeaderTag_TextGen();
      case LanguageConceptSwitch.HrefTag:
        return new HrefTag_TextGen();
      case LanguageConceptSwitch.HtmlDocument:
        return new HtmlDocument_TextGen();
      case LanguageConceptSwitch.ListItemTag:
        return new ListItemTag_TextGen();
      case LanguageConceptSwitch.ParagraphTag:
        return new ParagraphTag_TextGen();
      case LanguageConceptSwitch.TableBody:
        return new TableBody_TextGen();
      case LanguageConceptSwitch.TableColumns:
        return new TableColumns_TextGen();
      case LanguageConceptSwitch.TableHead:
        return new TableHead_TextGen();
      case LanguageConceptSwitch.TableRow:
        return new TableRow_TextGen();
      case LanguageConceptSwitch.TableTag:
        return new TableTag_TextGen();
      case LanguageConceptSwitch.TextElement:
        return new TextElement_TextGen();
      case LanguageConceptSwitch.UnorderedListTag:
        return new UnorderedListTag_TextGen();
    }
    return null;
  }

  @Override
  public void breakdownToUnits(@NotNull TextGenModelOutline outline) {
    for (SNode root : outline.getModel().getRootNodes()) {
      if (root.getConcept().equals(CONCEPTS.HtmlDocument$HL)) {
        String fname = getFileName_HtmlDocument(root);
        String ext = getFileExtension_HtmlDocument(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), Charset.forName(getEncoding_HtmlDocument()), root);
        continue;
      }
    }
  }
  private static String getFileName_HtmlDocument(SNode node) {
    return node.getName();
  }
  private static String getFileExtension_HtmlDocument(SNode node) {
    return "html";
  }
  private static String getEncoding_HtmlDocument() {
    return "UTF-8";
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept HtmlDocument$HL = MetaAdapterFactory.getConcept(0x9047bdebbe544bdaL, 0xac2865e4c26965daL, 0x214ad0a17bbce2a5L, "Html.structure.HtmlDocument");
  }
}
